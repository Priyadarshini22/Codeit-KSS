import java.util.*;

class Main {
  public static void maxproduct(int[] a, int n)
  {
    int[] sum = new int[n];
    sum[0] = a[0];
    for (int i = 1; i < n; i++) {
      sum[i] = sum[i - 1] + a[i];
    }
    int[] l = new int[n], r = new int[n];
    Stack<Integer> st = new Stack<>();
    for (int i = 1; i < n; i++) {
      while (!st.isEmpty() && a[st.peek()] >= a[i])
        st.pop();
      if (!st.isEmpty())
        l[i] = st.peek() + 1;
      else
        l[i] = 0;
      st.push(i);
    }
    st.clear();
    for (int i = n - 1; i >= 0; i--) {
      while (!st.isEmpty() && a[st.peek()] >= a[i])
        st.pop();

      if (!st.isEmpty())
        r[i] = st.peek() - 1;
      else
        r[i] = n - 1;
      st.push(i);
    }
    int max = 0;
    int temp;
    for (int i = 0; i < n; i++) {
      temp = a[i]* (sum[r[i]] - (l[i] == 0 ? 0 : sum[l[i] - 1]));
      max = Math.max(max,temp);
    }
    System.out.println(max);
  }
 public static void main(String[] args)
  { 
    Scanner s=new Scanner(System.in);
    int[] arr = new int[1000];   
    int i=0;
    while(true) 
    { 
      int temp=s.nextInt();
      if (temp<0)
      {
        break;
      }
      arr[i]=temp; 
      i++;
    }

    maxproduct(arr, arr.length);
  }
}

